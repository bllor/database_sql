section5
------------------------------------------------------

replication & sharding

데이터베이스를 백업을 해주어야 하는데, 시차가 발생한다.
--> 마스터를 만들고, replica라는 데이터베이스를 만들어서 역할을 분산 저장한다.
--> 마스터는 read(select) , write(insert,update,delete)를 저장하고,
    replica는 분산하여 read를 저장한다.
--> 실제로는 마스터 1개, replica 2개를 사용하는 것이 국룰

sharding
테이블 하나가 엄청 클 경우, 조회할 때 성능이 상당히 저하된다.
해당 테이블을 id와 같은 id의 범위로 쪼개서 저장하거나 
테이블의 개수를 고정하여 아이디의 나머지에 따라 테이블에 저장한다.
샤딩은 테이블을 특정한 기준으로 쪼개서 사용하는 것

------------------------------------------------------

NoSQL
mongoDB는 js의 자료구조를 사용함

nosql은 관계형 db가 아니다라는 특징이 있다.
nosql은 정규화가 없다 1:1, 1:m, m:m과 같은 관계가 없다.
nosql은 배열이나 객체를 저장할 수 있다.


nosql은 역정규화와 비슷하다.
조회를 많이 할 경우 nosql이 이득이 될 수 있다.
nosql은 칼럼을 미리 만들지 않아도 사용할 수 있다.
빅데이터를 사용할 때 nosql을 사용하는 것이 유리한데
어떤 데이터가 학습에 쓰일지 모르므로 다 쓸어담음

redis는 memoryDB, 자료구조DB
redis는 저장을 RAM에 저장하므로 속도가 엄청 빠르다.
빈번하게 조회하는 것만 잠깐 사용

요즘의 DB구조
서버 --> DB |다음과 같이 할 경우 속도가 느림
서버 --> REDIS(빈번한 데이터를 놔둠) --> DB | 자주사용하는 것을 redis에 두고, 없을 경우 DB로 조회

redis db의 싱크가 잘 맞아야 한다
db를 수정할 경우 redis를 같이 수정해주어야 하고, update날짜 등을 두어서 최신 자료인지 확인한다.
------------------------------------------------------

CAP이론(분산 시스템) -master, replica를 만들어서 분리
아래의 세가지 기준을 모두 만족할 수 없다. 2개만 만족할 수 있다.
consistency - db들이 모두 같은 데이터를 가지고 있다
availability - 모든 데이터베이스는 사용가능
partition tolerance - db의 연결고리가 끊겨도 사용가능하다.
여기서 ap,cp만 가능한데, 모든 데이터가 같으려면 다른 DB를 사용하지 못하고, 모든 DB를 사용하려면 데이터가 다를 수 있다.

BASE이론
basically available -- consistent를 살짝 포기하고 availability를 챙김
soft state -consistent를 포기하고 개발자가 consistent를 보충해라
eventually consistent - consistent를 하기 위해 노력하는 것

base이론은 nosql에서 많이 사용한다.