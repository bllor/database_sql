section8 인덱스

8.1.랜덤 I/O와 순차I/O
만약 3개의 페이지가 있을 경우 순차에서는 한 번에 세개를 불러와서 서버로 보내는데
랜덤은 하나씩 불러와서 서버로 보낸다.
순차는 한 번만 정보를 불러오면 되므로 랜덤보다 성능이 좋다고 할 수 있다.
디스크의 성능은 디스크 헤더의 위치 이동 없이 얼마나 많은 데이터를 한 번에 기록하느냐에 의해 결정된다.
쿼리 튜닝이라고 하는 것은 랜덤I/O를 줄이는 것이 목적이며, 쿼리를 처리하는데 꼭 필요한 데이터만 읽을 수 있도록
쿼리를 개선하는 것이다.

8.2.인덱스란
인덱스란 책의 끝에 있는 찾아보기와 같은 개념으로, 칼럼의 값을 주어진 순서로 미리 정렬해서 보관한다.
인덱스는 항상 정렬된 상태로 유지되어 있으며, 새로운 값이 들어오면 그에 맞게 재정렬된다.
인덱스는 데이터를 업데이트 하거나 삽입할 경우, 속도가 느린데 그 이유는 재정렬을 해야하기 때문이다.
인덱스는 데이터의 저장성능을 희생하고 데이터 읽기 속도를 높이는 기능이다.
1.인덱스의 종류
[1]b-tree인덱스
칼럼의 값을 변형하지 않고 원래의 값을 이용해 인덱싱하는 알고리즘
[2]hash 인덱스
칼럼의 값으로 해시값을 계산해서 인덱싱하는 알고리즘
값을 변형해어 인덱싱하므로 전방일치와 같이 값의 일부만을 검색하거나 범위를 검색할 때는 사용할 수 없다.

8.3.b-tree 인덱스
칼럼의 원래 값을 변형시키지 않고 인덱스 구조체 내에서는 항상 정렬된 상태로 유지된다.
가장 범용적인 목적으로 사용되는 인덱스 알고리즘이다.

1.구조 및 특성
b-tree는 트리 구조의 최상위에 하나의 루트노드가 존재하고 그 하위에 자식노드가 붙어있는 형태이다.
트리주고의 가장 하위에 있는 노드를 리프노드라하고, 트리 구조에서 루트 노드가 아니고 리프노드도 아닌 중간의 노드를 브랜치 노드라고 한다.


*
인덱스 레인지 스캔은 데이터를 읽어오기 위해 주로 랜덤i/o를 사용하며, 풀 테이블 스캔은 순차i/o를 사용한다.
그래서 큰 테이블의 레코드 대부분을 읽는 작업에서는 인덱스를 사용하지 않고 풀 테이블 스캔을 사용하도록 유도할 때도 있다.

